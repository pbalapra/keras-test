function(de_ij, a_ij, re_ij, r_ij){} ) )
f_morese_derv(0.05,0.5,1,0.5)
f_morse<-function(de_ij, a_ij, re_ij, r_ij){
e<- de_ij*((1-exp(a_ij*(re_ij-r_ij)))^2 -1)
return(e)
}
x.test<-seq(from=0.5,to=20,length.out=1000)
f_morese(0.05,0.5,1,x.test)
f_morse<-function(de_ij, a_ij, re_ij, r_ij){
e<- de_ij*((1-exp(a_ij*(re_ij-r_ij)))^2 -1)
return(e)
}
x.test<-seq(from=0.5,to=20,length.out=1000)
f_morse(0.05,0.5,1,x.test)
f_morse<-function(de_ij, a_ij, re_ij, r_ij){
e<- de_ij*((1-exp(a_ij*(re_ij-r_ij)))^2 -1)
return(e)
}
x.test<-seq(from=0.5,to=20,length.out=1000)
y.test<-f_morse(0.05,0.5,1,x.test)
plot(x.test,y.test)
f_morse<-function(de_ij, a_ij, re_ij, r_ij){
e<- de_ij*((1-exp(a_ij*(re_ij-r_ij)))^2 -1)
return(e)
}
x.test<-seq(from=0.3,to=20,length.out=1000)
y.test<-f_morse(0.05,0.5,1,x.test)
plot(x.test,y.test)
f_morse<-function(de_ij, a_ij, re_ij, r_ij){
e<- de_ij*((1-exp(a_ij*(re_ij-r_ij)))^2 -1)
return(e)
}
x.test<-seq(from=0.1,to=20,length.out=1000)
y.test<-f_morse(0.05,0.5,1,x.test)
plot(x.test,y.test)
f_morese_derv(0.05,0.5,1,x.test)
yk<-f_morese_derv(0.05,0.5,1,x.test)
yk[1]
names(yk)
fd<-D(expression(de_ij*((1-exp(a_ij*(re_ij-r_ij)))^2 -1)),"r_ij")
D(fd)
D(fd,"r_ij")
f_morese_derv<-function((de_ij, a_ij, re_ij, r_ij){
fd<-D(expression(de_ij*((1-exp(a_ij*(re_ij-r_ij)))^2 -1)),"r_ij")
val.1<-eval(fd)
sd<-D(fd,"r_ij")
val.2<-eval(sd)
return(val.1,val.2)
}
f_morese_derv<-function(de_ij, a_ij, re_ij, r_ij){
fd<-D(expression(de_ij*((1-exp(a_ij*(re_ij-r_ij)))^2 -1)),"r_ij")
val.1<-eval(fd)
sd<-D(fd,"r_ij")
val.2<-eval(sd)
return(val.1,val.2)
}
f_morese_derv(0.05,0.5,1,0.1)
f_morese_derv<-function(de_ij, a_ij, re_ij, r_ij){
fd<-D(expression(de_ij*((1-exp(a_ij*(re_ij-r_ij)))^2 -1)),"r_ij")
val.1<-eval(fd)
sd<-D(fd,"r_ij")
val.2<-eval(sd)
return(c(val.1,val.2))
}
f_morese_derv(0.05,0.5,1,0.1)
f_morese_derv(0.05,0.5,1,x.test)
y.deriv<-NULL
for (x.val in x.test){
y.d<-f_morese_derv(0.05,0.5,1,x.val)
y.deriv<-rbind(y.deriv,y.d)
}
y.deriv
plot(x.test,y.derv[,1])
plot(x.test,y.deriv[,1])
plot(x.test,y.deriv[,2])
y.test
max(y.test)
y.deriv
plot(x.test,y.test)
plot(y.test)
plot(y.deriv)
plot(x.text,y.deriv[,2])
plot(x.test,y.deriv[,2])
abs(y.deriv[,1])
sort(abs(y.deriv[,1]),index=TRUE)
k<-sort(abs(y.deriv[,1]),index=TRUE)
k$ix
plot(x.test,y.deriv[,1])
abline(h=0)
plot(x.test,y.test)
plot(x.test,y.deriv[,2])
y.derv[,1]
y.deriv[,1]
min(y.deriv)
min(y.deriv[,1])
plot(y.deriv[,1])
which(y.deriv==0)
which(y.deriv-10^6==0)
which(y.deriv-10^6==0.00000)
which(y.deriv[,1]-10^6==0.00000)
which(y.deriv[,1]==0.000001)
which(y.deriv[,1]==0.0000000001)
signif(y.deriv[,1],digits=8)
signif(y.deriv[,1],digits=3)
which(signif(y.deriv[,1],digits=3)==0)
(signif(y.deriv[,1],digits=3)*10^6)
(y.deriv[,1]*10^6)
sort((y.deriv[,1]*10^6),index=TRUE)
?nnet
require(nnet)
?nnet
require(dynaTree)
?dynaTree
?randomForest
require(randomForest)
?randomForest
randomForest(Species ~ ., data=iris)
iris
names(iris)
randomForest(x=iris[,-5],y=iris[,5])
randomForest(Species ~ ., data=iris)
?nnet
require(nnet)
?nnet
require(svm)
require(e1071)
?svm
train
require(kernlab)
require(caret)
?train
createGrid("svmPoly")
?ksvm
?exp
?train
as.vector(x=c(1:10))
as.vector(x=c(1:10))
x=c(1:10)
x
doMC
,
require(multicore)
?doMC
doMC
registerDoPar
createGrid("nnet")
tp<-createGrid("nnet")
cbind(tp,".maxit"=10000)
cbind(tp,".maxit"=10000,".abstol"=3)
tp<-createGrid("nnet",length=1)
tp<-createGrid("nnet",length=2)
tp<-createGrid("nnet",len=2)
createGrid("nnet",len=2)
createGrid("nnet",len=3)
?nnet
require(e1071)
?tune.nnet
?tune.svm
?tune.nnet
?tune.svm
?tune.nnet
?tune
?best.nnet
?tune
?tune.control
sprintf("%04d"3)
sprintf("%04d",3)
?write.table
require(kernlab)
?svmLinear
?ksvm
require(dyantree)
require(dyanTrees)
require(dyanTree)
require(dynaTree)
?deleteclouds
?barplot
?randomForest
require(randomForest)
?randomForest
View(d)
require(ksvm)
require(caret)
?ksvm
?svm
require(kernlab)
?ksvm
require(kernlab)
?gausspr
x = c(-4, -3, -2, -1,  0, 0.5, 1, 2)
y = c(-2,  0,  -0.5,1,  2, 1, 0, -1)
plot(x,y)
foo2 <- gausspr(x, y, variance.model = TRUE)
xtest <- seq(-4,2,0.2)
lines(xtest, predict(foo2, xtest))
lines(xtest,
predict(foo2, xtest)+2*sqrt(predict(foo2,xtest, type="variance")),
col="red")
lines(xtest,
predict(foo2, xtest)-2*sqrt(predict(foo2,xtest, type="variance")),
col="red")
k<-1
length(k)
require(kernlab)
?gausspr
x = c(-4, -3, -2, -1,  0, 0.5, 1, 2)
y = c(-2,  0,  -0.5,1,  2, 1, 0, -1)
plot(x,y)
foo2 <- gausspr(x, y, variance.model = TRUE)
xtest <- seq(-4,2,0.2)
lines(xtest, predict(foo2, xtest))
lines(xtest,
predict(foo2, xtest)+2*sqrt(predict(foo2,xtest, type="variance")),
col="red")
lines(xtest,
predict(foo2, xtest)-2*sqrt(predict(foo2,xtest, type="variance")),
col="red")
x = c(-4, -3, -2, -1,  0, 0.5, 1, 2)
y = c(-2,  0,  -0.5,1,  2, 1, 0, -1)
plot(x,y)
var = c(0.01,0.01,10,0.01,100,1,1,1)
foo2 <- gausspr(x, y, var=var, variance.model = TRUE)
xtest <- seq(-4,2,0.2)
lines(xtest, predict(foo2, xtest))
lines(xtest,
predict(foo2, xtest)+2*sqrt(predict(foo2,xtest, type="variance")),
col="red")
lines(xtest,
predict(foo2, xtest)-2*sqrt(predict(foo2,xtest, type="variance")),
col="red")
dev.off()
dev.off()
x = c(-4, -3, -2, -1,  0, 0.5, 1, 2)
y = c(-2,  0,  -0.5,1,  2, 1, 0, -1)
plot(x,y,typ="n")
var = c(0.01,0.01,10,0.01,100,1,1,1)
foo2 <- gausspr(x, y, var=var, variance.model = TRUE)
xtest <- seq(-4,2,0.2)
lines(xtest, predict(foo2, xtest))
lines(xtest,
predict(foo2, xtest)+2*sqrt(predict(foo2,xtest, type="variance")),
col="red")
lines(xtest,
predict(foo2, xtest)-2*sqrt(predict(foo2,xtest, type="variance")),
col="red")
x = c(-4, -3, -2, -1,  0, 0.5, 1, 2)
y = c(-2,  0,  -0.5,1,  2, 1, 0, -1)
plot(x,y,typ="n")
var = c(0.01,0.01,10,0.01,100,0.01,0.01,0.01)
foo2 <- gausspr(x, y, var=var, variance.model = TRUE)
xtest <- seq(-4,2,0.2)
lines(xtest, predict(foo2, xtest))
lines(xtest,
predict(foo2, xtest)+2*sqrt(predict(foo2,xtest, type="variance")),
col="red")
lines(xtest,
predict(foo2, xtest)-2*sqrt(predict(foo2,xtest, type="variance")),
col="red")
x = c(-4, -3, -2, -1,  0, 0.5, 1, 2)
y = c(-2,  0,  -0.5,1,  2, 1, 0, -1)
plot(x,y,typ="n")
var = c(0.01,0.01,10,0.01,0.01,0.01,0.01,0.01)
foo2 <- gausspr(x, y, var=var, variance.model = TRUE)
xtest <- seq(-4,2,0.2)
lines(xtest, predict(foo2, xtest))
lines(xtest,
predict(foo2, xtest)+2*sqrt(predict(foo2,xtest, type="variance")),
col="red")
lines(xtest,
predict(foo2, xtest)-2*sqrt(predict(foo2,xtest, type="variance")),
col="red")
x = c(-4, -3, -2, -1,  0, 0.5, 1, 2)
y = c(-2,  0,  -0.5,1,  2, 1, 0, -1)
plot(x,y,typ="n")
var = c(0.01,0.01,10,0.01,0.01,0.01,0.01,0.01)
foo2 <- gausspr(x, y, var=var, variance.model = TRUE)
xtest <- seq(-4,2,0.2,10)
lines(xtest, predict(foo2, xtest))
lines(xtest,
predict(foo2, xtest)+2*sqrt(predict(foo2,xtest, type="variance")),
col="red")
lines(xtest,
predict(foo2, xtest)-2*sqrt(predict(foo2,xtest, type="variance")),
col="red")
x = c(-4, -3, -2, -1,  0, 0.5, 1, 2)
y = c(-2,  0,  -0.5,1,  2, 1, 0, -1)
plot(x,y,typ="n")
var = c(0.01,0.01,10,0.01,0.01,0.01,0.01,0.01)
foo2 <- gausspr(x, y, var=var, variance.model = TRUE)
xtest <- seq(-4,10,0.2)
lines(xtest, predict(foo2, xtest))
lines(xtest,
predict(foo2, xtest)+2*sqrt(predict(foo2,xtest, type="variance")),
col="red")
lines(xtest,
predict(foo2, xtest)-2*sqrt(predict(foo2,xtest, type="variance")),
col="red")
x = c(-4, -3, -2, -1,  0, 0.5, 1, 2)
y = c(-2,  0,  -0.5,1,  2, 1, 0, -1)
plot(x,y,typ="n")
var = c(0.01,0.01,10,0.01,0.01,0.01,0.01,0.01)
foo2 <- gausspr(x, y, var=var, variance.model = TRUE)
xtest <- seq(-4,10,0.2)
plot(xtest, predict(foo2, xtest))
lines(xtest,
predict(foo2, xtest)+2*sqrt(predict(foo2,xtest, type="variance")),
col="red")
lines(xtest,
predict(foo2, xtest)-2*sqrt(predict(foo2,xtest, type="variance")),
col="red")
x = c(-4, -3, -2, -1,  0, 0.5, 1, 2)
y = c(-2,  0,  -0.5,1,  2, 1, 0, -1)
plot(x,y,typ="n")
var = c(0.01,0.01,10,0.01,0.01,0.01,0.01,0.01)
foo2 <- gausspr(x, y, var=var, variance.model = TRUE)
xtest <- seq(-4,2,0.2)
plot(xtest, predict(foo2, xtest))
lines(xtest,
predict(foo2, xtest)+2*sqrt(predict(foo2,xtest, type="variance")),
col="red")
lines(xtest,
predict(foo2, xtest)-2*sqrt(predict(foo2,xtest, type="variance")),
col="red")
rnorm
?rnorm
rnorm(2)
runif(2,10,20)
runif(2,10,20)
runif(2,10,20)
as.data.frame(runif(2,10,20))
outDF<-NULL
outDF$obj1<-runif(1,10,20)
outDF$obj2<-runif(1,10,20)
outDF<-as.data.frame(outDF)
outDF
pending_input<-as.data.frame()
pending_input<-data.frame()
nrow(pending_input)
?file.rename
?file.rename
?system
setdiff
"abc" %in% c("asdas","abc")
"abc" %in% c("asdas")
"abc" %in% c()
33- (26+5)
10^307
(10^307)/(60*60)
(10^307)/(60*60*60)
100000/12
(100000/12)*20/100
inpDF<-NULL
nrow(inpDF)
?read.table
35^80
250^150
599397.933530+104894779.219440
599397.933530+104894779.219440
15097.869732+10056592117.851543
11196684.55078125+3006.714599609375+5787.6861572265625+31745625.82836914
1630371.542074+9997459892.724804
setwd("~/Projects/CACHE/external/2016/OrFPGA/exp-03/code")
filename<-"../data/smartxplorer-MAP_PAR_384-XST_16-CT_Default.csv"
data1<-read.csv(file=filename,header=TRUE)
names(data1)
names(data1)[18:]
names(data1)[18:25]
filename<-"../data/smartxplorer-MAP_PAR_384-XST_16-CT_Default.csv"
data1<-read.csv(file=filename,header=TRUE)
area.cols<-names(data1)[18:25]
for(col in area.cols){
t2Data<-subset(data1, select=c("power_est",col))
pareto<-paretoFilter(t2Data)
print(pareto)
}
#!/bin/Rscript
require(mco)
require(lattice)
filename<-"../data/smartxplorer-MAP_PAR_384-XST_16-CT_Default.csv"
data1<-read.csv(file=filename,header=TRUE)
area.cols<-names(data1)[18:25]
for(col in area.cols){
t2Data<-subset(data1, select=c("power_est",col))
pareto<-paretoFilter(t2Data)
print(pareto)
}
filename<-"../data/smartxplorer-MAP_PAR_384-XST_16-CT_Default.csv"
data1<-read.csv(file=filename,header=TRUE)
area.cols<-names(data1)[18:25]
for(col in area.cols){
t2Data<-as.matrix(subset(data1, select=c("power_est",col)))
pareto<-paretoFilter(t2Data)
print(pareto)
}
t2Data
omit.na(t2Data)
na.omit(t2Data)
?na.omit
#!/bin/Rscript
require(mco)
require(lattice)
filename<-"../data/smartxplorer-MAP_PAR_384-XST_16-CT_Default.csv"
data1<-read.csv(file=filename,header=TRUE)
area.cols<-names(data1)[18:25]
for(col in area.cols){
t2Data<-as.matrix(subset(data1, select=c("power_est",col)))
t2Data<-as.matrix(na.omit(t2Data))
pareto<-paretoFilter(t2Data)
print(pareto)
}
source('~/Projects/CACHE/external/2016/OrFPGA/exp-03/code/analysis.R')
dev.off()
dev.off()
dev.off()
area.cols<-names(data)[18:25]
col<-area.cols[1]
t1Data<-as.matrix(subset(data, select=c("power_est",col)))
t2Data<-as.matrix(na.omit(t1Data))
pareto<-paretoFilter(t2Data)
print(pareto)
col
col<-area.cols[1]
col
area.cols[1]
area.cols
filename<-"../data/smartxplorer-MAP_PAR_384-XST_16-CT_Default.csv"
data<-read.csv(file=filename,header=TRUE)
area.cols<-names(data)[18:25]
col<-area.cols[1]
col
t1Data<-as.matrix(subset(data, select=c("power_est",col)))
t2Data<-as.matrix(na.omit(t1Data))
pareto<-paretoFilter(t2Data)
print(pareto)
title<-sprintf("Pareto front: power_est vs %s",col)
id<-sprintf("%s",col)
filename<-paste(path,"/pareto_",id,".png",sep="")
plot(t2Data, type="n",
main=title,
xlab ="powet_est", ylab=col,
cex.lab=2,cex.axis=2,cex.main=2,cex=2
)
spareto<-pareto[order(pareto[,1]),]
lines(spareto,type="s", cex=3,lwd=10,col="darkgreen")
plot(t2Data, #type="n",
main=title,
xlab ="powet_est", ylab=col,
cex.lab=2,cex.axis=2,cex.main=2,cex=2
)
spareto<-pareto[order(pareto[,1]),]
lines(spareto,type="s", cex=3,lwd=10,col="darkgreen")
?points
source('~/Projects/CACHE/external/2016/OrFPGA/exp-03/code/analysis.R')
source('~/Projects/CACHE/external/2016/OrFPGA/exp-03/code/analysis.R')
source('~/Projects/CACHE/external/2016/OrFPGA/exp-03/code/analysis.R')
source('~/Projects/CACHE/external/2016/OrFPGA/exp-03/code/analysis.R')
source('~/Projects/CACHE/external/2016/OrFPGA/exp-03/code/analysis.R')
area.cols
names(data)
source('~/Projects/CACHE/external/2016/OrFPGA/exp-03/code/analysis.R')
source('~/Projects/CACHE/external/2016/OrFPGA/exp-03/code/analysis.R')
source('~/Projects/CACHE/external/2016/OrFPGA/exp-03/code/analysis.R')
names(data)
source('~/Projects/CACHE/external/2016/OrFPGA/exp-03/code/analysis.R')
source('~/Projects/CACHE/external/2016/OrFPGA/exp-03/code/analysis.R')
source('~/Projects/CACHE/external/2016/OrFPGA/exp-03/code/analysis.R')
source('~/Projects/CACHE/external/2016/OrFPGA/exp-03/code/analysis.R')
source('~/Projects/CACHE/external/2016/OrFPGA/exp-03/code/analysis.R')
data
nrow(train.data)
source('~/Projects/CACHE/external/2016/OrFPGA/exp-03/code/analysis.R')
inputs<-names(data)[1:14]
output<-col
train.data<-subset(data, select=c(output,inputs))
train.data
summary(train.data)
data$xst.reduce_control_sets
source('~/Projects/CACHE/external/2016/OrFPGA/exp-03/code/analysis.R')
source('~/Projects/CACHE/external/2016/OrFPGA/exp-03/code/analysis.R')
source('~/Projects/CACHE/external/2016/OrFPGA/exp-03/code/analysis.R')
source('~/Projects/CACHE/external/2016/OrFPGA/exp-03/code/analysis.R')
setwd("~/Projects/CACHE/external/2016/OrFPGA/area-analysis/exp-02/code")
source('~/Projects/CACHE/external/2016/OrFPGA/area-analysis/exp-02/code/analysis.R')
setwd("~/Projects/CACHE/external/2016/OrFPGA/area-analysis/exp-03/code")
filename<-"../data/smartxplorer-MAP_PAR_384-XST_16-CT_Default.csv"
data1<-read.csv(file=filename,header=TRUE)
filename<-"../data/smartxplorer-MAP_PAR_384-XST_16-CT_eq34.csv"
data2<-read.csv(file=filename,header=TRUE)
names(data1)
names(data2)
source('~/Projects/CACHE/external/2016/OrFPGA/area-analysis/exp-03/code/analysis.R')
source('~/Projects/CACHE/external/2016/OrFPGA/area-analysis/exp-03/code/createHtml.R')
input.filename<-"../data-inp/minife_01.csv"
setwd("~/Projects/CACHE/external/2016/perfpred/exp-11b/code")
input.filename<-"../data-inp/minife_01.csv"
t1Data<-read.csv(file=input.filename,header = TRUE)
head(t1Data)
t1Data$p1
unique(t1Data$p1)
input.filename<-"../data-inp/minife_02.csv"
t1Data<-read.csv(file=input.filename,header = TRUE)
unique(t1Data$p1)
unique(t1Data$p1)[1:25]
t1Data$p1 %in% unique(t1Data$p1)[1:25]
kk<-t1Data$p1 %in% unique(t1Data$p1)[1:25]
kk
which(kk==FALSE)
length(which(kk==FALSE))
length(which(kk==TRUE))
unique(t1Data$p1)
length(unique(t1Data$p1))
length(unique(t1Data$p1))*75/100
